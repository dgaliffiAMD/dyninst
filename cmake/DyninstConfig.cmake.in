# - Config file for Dyninst and its component libraries
# It defines the following variables:
#
# Dyninst_INCLUDE_DIRS
# Dyninst_LIBRARIES
# Dyninst_INTERNAL_DEFINES - used by the test suite

# helper function for setting variables such as DYNINST_LIBRARIES from Dyninst_LIBRARIES
function(_DYNINST_SET_DEPRECATED_VARIABLE _VAR)
    if(NOT "${_VAR}" MATCHES "^Dyninst_")
        message(
            AUTHOR_WARNING
                "Dyninst ignoring variable not prefixed with 'Dyninst_' :: ${_VAR}")
    elseif("${${_VAR}}" STREQUAL "")
        message(AUTHOR_WARNING "Dyninst missing expected variable :: ${_VAR}")
    else()
        string(REGEX REPLACE "^Dyninst_" "" _VAR_BASE "${_VAR}")
        set(DYNINST_${_VAR_BASE}
            "${${_VAR}}"
            PARENT_SCOPE)
    endif()
endfunction()

# compute paths
get_filename_component(Dyninst_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

# dyninst cmake modules
set(Dyninst_MODULE_PATH ${Dyninst_CMAKE_DIR} ${Dyninst_CMAKE_DIR}/tpls
                        ${Dyninst_CMAKE_DIR}/Modules)

# version
include(${CMAKE_CURRENT_LIST_DIR}/DyninstVersion.cmake)

@PACKAGE_INIT@

set_and_check(Dyninst_ROOT_DIR ${PACKAGE_PREFIX_DIR})
set_and_check(Dyninst_INCLUDE_DIR ${PACKAGE_PREFIX_DIR}/@INSTALL_INCLUDE_DIR@)
set_and_check(Dyninst_INCLUDE_DIRS ${PACKAGE_PREFIX_DIR}/@INSTALL_INCLUDE_DIR@)
set(Dyninst_LIBRARIES)

add_library(Dyninst::Dyninst INTERFACE IMPORTED)

set(Dyninst_BUILD_SHARED_LIBS @BUILD_SHARED_LIBS@)
set(Dyninst_BUILD_STATIC_LIBS @BUILD_STATIC_LIBS@)

# handle shared or static in the components (i.e. request/require shared or static
# libraries)
set(_Dyninst_TARGET_SUFFIX)
set(_Dyninst_PREFER_STATIC OFF)
set(_Dyninst_REQUIRE_STATIC OFF)
set(_Dyninst_REQUIRE_SHARED OFF)
if("shared" IN_LIST Dyninst_FIND_COMPONENTS)
    list(REMOVE_ITEM Dyninst_FIND_COMPONENTS "shared")
    if(Dyninst_FIND_REQUIRED_shared)
        set(_Dyninst_REQUIRE_SHARED ON)
    endif()
elseif("static" IN_LIST Dyninst_FIND_COMPONENTS OR (NOT Dyninst_BUILD_SHARED_LIBS
                                                    AND Dyninst_BUILD_STATIC_LIBS))
    list(REMOVE_ITEM Dyninst_FIND_COMPONENTS "static")
    set(_Dyninst_TARGET_SUFFIX "-static")
    if(NOT Dyninst_FIND_REQUIRED_static)
        set(_Dyninst_PREFER_STATIC ON)
    else()
        set(_Dyninst_REQUIRE_STATIC ON)
    endif()
endif()

# find OpenMP package
if(@USE_OpenMP@)
    find_package(OpenMP REQUIRED)
endif()

if(NOT DEFINED DYNINST_IMPORT_DEPRECATED_TARGETS
   AND DEFINED ENV{DYNINST_IMPORT_DEPRECATED_TARGETS})
    set(DYNINST_IMPORT_DEPRECATED_TARGETS
        "$ENV{DYNINST_IMPORT_DEPRECATED_TARGETS}"
        CACHE
            BOOL
            "Create non-namespaced interface targets to Dyninst targets, e.g. common provides Dyninst::common"
        )
endif()

# Interface libraries
foreach(TARG @DYNINST_INTERFACE_TARGETS@)
    include("${Dyninst_CMAKE_DIR}/interface/${TARG}Targets.cmake" OPTIONAL)
endforeach()

# Library dependencies
foreach(TARG @DYNINST_BUILD_TARGETS@)
    include("${Dyninst_CMAKE_DIR}/${TARG}Targets.cmake" OPTIONAL)
    if(NOT Dyninst_FIND_COMPONENTS)
        list(APPEND Dyninst_LIBRARIES Dyninst::${TARG}${_Dyninst_TARGET_SUFFIX})
        target_link_libraries(Dyninst::Dyninst
                              INTERFACE Dyninst::${TARG}${_Dyninst_TARGET_SUFFIX})
    endif()
    # provide generic alias in static-only build when shared is not required
    if(NOT _Dyninst_REQUIRE_SHARED
       AND NOT TARGET Dyninst::${TARG}
       AND TARGET Dyninst::${TARG}-static)
        add_library(Dyninst::${TARG} ALIAS Dyninst::${TARG}-static)
    endif()
    # deprecated non-namespaced targets
    if(DYNINST_IMPORT_DEPRECATED_TARGETS)
        if(NOT TARGET ${TARG} AND TARGET Dyninst::${TARG})
            if(NOT "${TARG}" STREQUAL "dyninstAPI_RT")
                add_library(${TARG} INTERFACE IMPORTED)
                target_link_libraries(${TARG} INTERFACE Dyninst::${TARG})
            endif()
        endif()
    endif()
endforeach()

# Other variables Dyninst mutators may depend on
set(Dyninst_PLATFORM "@PLATFORM@")
set(Dyninst_INTERNAL_DEFINES @UNIFIED_DEFINES@)

if(Dyninst_FIND_COMPONENTS)
    foreach(COMP ${Dyninst_FIND_COMPONENTS})
        if(TARGET Dyninst::${COMP}${_Dyninst_TARGET_SUFFIX})
            set(Dyninst_${COMP}_FOUND 1)
            list(APPEND Dyninst_LIBRARIES Dyninst::${COMP}${_Dyninst_TARGET_SUFFIX})
            target_link_libraries(Dyninst::Dyninst
                                  INTERFACE Dyninst::${COMP}${_Dyninst_TARGET_SUFFIX})
        elseif(
            _Dyninst_PREFER_STATIC
            AND NOT _Dyninst_REQUIRE_STATIC
            AND TARGET Dyninst::${COMP})
            set(Dyninst_${COMP}_FOUND 1)
            list(APPEND Dyninst_LIBRARIES Dyninst::${COMP})
            target_link_libraries(Dyninst::Dyninst INTERFACE Dyninst::${COMP})
        else()
            set(Dyninst_${COMP}_FOUND 0)
        endif()
    endforeach()
endif()
# always link to Boost and TBB
target_link_libraries(Dyninst::Dyninst INTERFACE Dyninst::Boost Dyninst::TBB)

_dyninst_set_deprecated_variable(Dyninst_ROOT_DIR)
_dyninst_set_deprecated_variable(Dyninst_CMAKE_DIR)
_dyninst_set_deprecated_variable(Dyninst_INCLUDE_DIR)
_dyninst_set_deprecated_variable(Dyninst_INCLUDE_DIRS)
_dyninst_set_deprecated_variable(Dyninst_LIBRARIES)
_dyninst_set_deprecated_variable(Dyninst_PLATFORM)
_dyninst_set_deprecated_variable(Dyninst_INTERNAL_DEFINES)

if(DYNINST_IMPORT_DEPRECATED_TARGETS)
    set(DYNINST_INTERNAL_DEFINES)
    foreach(_DEF ${Dyninst_INTERNAL_DEFINES})
        set(DYNINST_INTERNAL_DEFINES "${DYNINST_INTERNAL_DEFINES} -D${_DEF}")
    endforeach()
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
    Dyninst
    FOUND_VAR Dyninst_FOUND
    REQUIRED_VARS Dyninst_ROOT_DIR Dyninst_INCLUDE_DIR Dyninst_LIBRARIES
    VERSION_VAR Dyninst_VERSION
    HANDLE_COMPONENTS)

# unset temporary variables
unset(_Dyninst_TARGET_SUFFIX)
unset(_Dyninst_PREFER_STATIC)
unset(_Dyninst_REQUIRE_STATIC)
unset(_Dyninst_REQUIRE_SHARED)
